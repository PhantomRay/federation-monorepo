generator client {
  provider = "prisma-client-js"
  output   = "../src/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  BANNED
  DELETED
}

enum OtpMethod {
  EMAIL
  SMS
}

model User {
  id                 String     @id @db.VarChar(12) // length of 12 is valid until 2058 Nov
  email              String     @unique @db.VarChar(100)
  new_email          String?    @db.VarChar(100)
  email_verified     Boolean    @default(false)
  email_verified_at  DateTime?
  country_code       String?    @db.VarChar(6)
  mobile             String?    @db.VarChar(16)
  new_country_code   String?    @db.VarChar(6)
  new_mobile         String?    @db.VarChar(16)
  mobile_verified    Boolean    @default(false)
  mobile_verified_at DateTime?
  status             UserStatus @default(ACTIVE)
  type               UserRole   @default(USER)
  password_hash      String     @db.VarChar(512)
  password_set_at    DateTime   @default(now())
  salt               String     @db.VarChar(64)
  login_failed_count Int        @default(0)
  lockout_at         DateTime?
  created_at         DateTime   @default(now())
  updated_at         DateTime?
  active_at          DateTime?
  channel            String?    @db.VarChar(64)
  deactivated_at     DateTime?  @db.Timestamp(6)
  suspended_at       DateTime?  @db.Timestamp(6)
  suspended_reason   String?    @db.VarChar(512)
  suspended_until    DateTime?  @db.Timestamp(6)
  suspended_by       String?    @db.VarChar(12)
  banned_at          DateTime?  @db.Timestamp(6)
  banned_reason      String?    @db.VarChar(512)
  banned_by          String?    @db.VarChar(12)
  Token              Token[]
  Otp                Otp[]

  // unique on (country_code, mobile), they can be null though
  @@unique([country_code, mobile], name: "country_code_mobile")
  @@index([email], name: "email")
  @@index([country_code, mobile], name: "country_code_mobile")
  @@map("user")
}

model Token {
  id         String    @id @default(uuid())
  token      String    @db.VarChar(512)
  revoked    Boolean   @default(false)
  meta       Json?
  created_at DateTime  @default(now())
  updated_at DateTime?
  expire_at  DateTime
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  uid        String?   @db.VarChar(40) // client/device id
  ip         String?   @db.VarChar(50) // IP at the time of creation/update

  @@map("token")
}

model Otp {
  id         String    @id @default(uuid())
  failed     Int       @default(0)
  method     OtpMethod
  token      String    @db.VarChar(512)
  salt       String    @db.VarChar(64)
  type       String    @db.VarChar(24)
  created_at DateTime  @default(now())
  expire_at  DateTime
  user       User      @relation(fields: [userId], references: [id])
  userId     String

  // unique on (user_id, method, type), they can be null though
  @@unique([userId, method, type], name: "user_id_method_type")
  @@map("otp")
}
